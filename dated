#!/usr/bin/zsh

show_help() {
cat << EOF

       .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
       |  dated - 'date -d' on steroids. Expand the ability of date to handle |
       |          more natural language time references (in English)          |
       *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*

    SYNOPSIS: dated [--help|-h|] ...<string> [formating options of date]

       - 'dated <string>' Parse <string> to a valid time reference and send to 'date -d'" 
       - 'dated -h|--help' will print this text" 
       - any and all additional arguments are passed as-is to 'date -d' to control formating \n"
    The text in <string> is parsed and formated into a valid datetime input for 'date -d'."  
    It is quite difficult for computers to parse our spoken time references and using only built-in tools'
    (i.e. date -d from coreutils) presents a huge challenge when parsing arbitrary datetime text.'
    There are dedicated, complex NLP tools that work better but they are not perfect either.\n' 
    
    EXAMPLES:'
    "Set for Tuesday"       - this is valid.
    "for 2023/5/24 at 8pm"  - also OK.
    "March the 3rd in the evening."  - is OK
    "on March 16 at 7 in the morning in a couple of years" - OK
    "on New years eve, 10 years from now" - OK
    "two years from now on halloween at 730 in the morning"  - works too
    "3rd of March 2024 at 23 hours 13 minutes" - OK
           ( "...for next week"
    Also   | "...in 3 hours"
    valid: { "...tomorrow morning"  (see source code for "morning" & other adjustable definitions)
           | "...in 33 hours and 5 minutes"
           ( "...January 23 quarter past 7 in the evening
    Custom:  "...at the usual time" allows privacy and customization (see code for ideas)
    In some edge cases, successful parsing gives incorrect datetime. Some practice needed to avoid those

EOF
exit 0 
}
str="now"
[[ $options[extended_glob] == off ]] && eglob=1

if [[ $# -gt 0 ]] ; then
   [[ $eglob ]] && setopt extendedglob  #To cover some serious ground, while avoiding (most of) the mines:

   case "$1" in 
          -h|--help) show_help ;; 
          @[0-9]*) echo $(date -d "$1" "${@:2}") ; exit 0 ;;
   esac

    str=" $1 "
#Just the ones that are going to mess up our date parsing:
    str="${str//[$'\t\r\n']}"
    str="${str:l}"
 #Isolate the time reference and remove possible vagueness 
 #(oppinionated but adjustable. Only the future considered) 
    dt=($(date +%Y%n%_m%n%e%n%u%n%k))
    #dt[1]=y, dt[2]=m, dt[3]=d, dt[4]=dw, dt[5]=h
    str=" $str "
    #whisper detected non-speech events such as "(wind blowing)" or "[BLANK_AUDIO]": 
    str="${str/\(*\)}"   
    str="${str/\[*\]}"    
    #whisper transcribes these to alph. when time context unclear:
    str="${str/ nine/ 9}" 
    str="${str/ eight/ 8}"
    str="${str/ seven/ 7}"
    str="${str/ six/ 6}"
    str="${str/ five/ 5}"
    str="${str/ four/ 4}"
    str="${str/ three/ 3}"
    str="${str/ two/ 2}"
    str="${str/ one/ 1}"
    str="${str/ first/ 1}"  # the other ordinals seems to behave in whisper
    str="${str/ next weekend/ Sun 1pm +7day}"
    str="${str/ weekend/ Sun 1pm}"
    str="${str/ couple of/ 2}"
    str="${str/ dozen/ 12}"
    str="${str/ decade/ 10year}"
    str="${str/ (several|few)/ 3}"
    #Some fixed dates:--------------
    yr="$dt[1]"
    #Extract the year if present (for the floaters like easter etc., look in the future)
    for st in "${=str//[^0-9]##/ }"; do ; yr=$(( st > yr ? st : yr )) ; done
    [[ "${str/(#m) [0-9]## year[s]#}" ]] && yr=$(( yr + ${${MATCH//[^0-9]}:-0} ))
    str="${str/(#m) next (christ|hallow|thanks|easter|valent)/ +1year $MATCH[7,$MEND]}"
    str="${str/ christmas( day|)/ Dec 25th }"
    str="${str/ halloween/ Oct 31st }"
    str="${str/ (st. |saint |)valentine('s day|'s|)/ Feb 14th }"
    # US of A:
    str="${str/ thanksgiving( day|)/ Nov $((28 - (5 + yr + yr/4 - yr/100 + yr/400) % 7))}"
    str="${str/ cyber monday/ Nov $((28 - (5 + yr + yr/4 - yr/100 + yr/400) % 7)) +4day}"
    str="${str/ black friday/ Nov $((28 - (5 + yr + yr/4 - yr/100 + yr/400) % 7)) +1day}"
    # Canada:
    str="${str/ boxing day/ Dec 26th }"
    str="${str/ canada day/ July 1st}"
    #western countries only:
    eas="$(ncal -e $yr)"
    str="${str/ easter/ $eas}"
    str="${str/ easter monday/ $eas +1day}"
    str="${str/ good friday/ $eas -2day}"
    #greek/russian ortodox easter, uncomment this instead:  
    #str="${str/ easter(| day)/$(ncal -o $yr)}"
    str="${str/ new year(s|\'s|\'s day)#/ Jan 1st}"
    str="${str/ eve / -1day }"
    #-------------------------------
    #whisper needs a clear pause to produce 12:34 or 12.34 instead of 1234 but we can fight such unnatural speech:
    str="${str/(#m)( [0-9][0-5][0-9] | 1[0-9][0-5][0-9] )/$MATCH[1,$MEND-$MBEGIN-2]:$MATCH[$MEND-$MBEGIN-1,$MEND]}"
    #the logic above being that you can specify this way the time up to 19:59 (1959). Compromise, avoids overlap with yr.
    #when it does produce 2.34 we convert it to 2:34:
    str="${str/(#m)[0-9].[0-9]/$MATCH[1]:$MATCH[3]}"
    str="${str/(#m)([ 123][0-9](rd|nd|st|th)#(,)#| at| to|ast)# ([1-9]|10|11)(:[0-5][0-9])# in the morning/$MATCH[1,$MEND-$MBEGIN-14]am}"
    str="${str/(#m)([ 123][0-9](rd|nd|st|th)#(,)#| at| to|ast)# [1-7](:[0-5][0-9])# in the afternoon/$MATCH[1,$MEND-$MBEGIN-16]pm}"
    str="${str/(#m)([ 123][0-9](rd|nd|st|th)#(,)#| at| to|ast)# ([6-9]|10|11)(:[0-5][0-9])# in the evening/$MATCH[1,$MEND-$MBEGIN-14]pm}"
    str="${str/(#m)([ 123][0-9](rd|nd|st|th)#(,)#| at| to|ast)# ([1-3]|12)(:[0-5][0-9])# at night/$MATCH[1,$MEND-$MBEGIN-8]am}"
    str="${str/(#m)([ 123][0-9](rd|nd|st|th)#(,)#| at| to|ast)# (10|11)(:[0-5][0-9])# at night/$MATCH[1,$MEND-$MBEGIN-8]pm}"
    str="${str/(#m)( at| to|ast) ([6-9]|10|11)(:[0-5][0-9])# tonight/$MATCH[1,$MEND-$MBEGIN-7]pm}"
    str="${str/(#m)tonight(,| at| for)# ([6-9]|10|11)(:[0-5][0-9])#/today $MATCH[9,$MEND]pm}"
    str="${str/(#m) (1|2|)[0-9] to / -$MATCH[1,$MEND-$MBEGIN-3]min }"
    str="${str/(#m) (1|2|)[0-9] past / +$MATCH[1,$MEND-$MBEGIN-5]min }"
    str="${str/ quarter to / -15min }"
    str="${str/ quarter past / +15min }"
    str="${str/ half past / +30min }"
    str="${str/ (early in the morning|early morning)/ 6am}"
    str="${str/ morning/ 9am}"   #when used alone, i.e. in the morning NOT 6 in the morning 
    str="${str/ evening/ 8pm}"   #used alone, i.e. in the evening NOT 9 in the evening
    str="${str/ before noon/ 11am}"  
    str="${str/ tonight/ 10pm}"
    str="${str/ afternoon/ 3pm}"  
    str="${str/ after lunch/ 1pm}"
    str="${str/ after work/ 6pm}"
    str="${str/ night / 11pm}"
    str="${str/ midnight/ 11:59:59pm}"
    str="${str/ (lunch time|lunch|noon)/ 12pm}"
    str="${str/ breakfast/ 7am}"  
    str="${str/ tea time/ 4pm}"      #Not only for tea drinkers, you can set this and others as custom times ...
    str="${str/ my time/ 5:45am}"    #... for example, if you are an early-rising jogger etc.
    str="${str/ usual time/ 3:45pm}" #... another SECRET example, preserving privacy when speaking.
    # These could be precise but will need the parsed date and Lat. and TZ or external tools: 
    str="${str/ (during|around|just before) sunrise/ 6:10am}"
    str="${str/ (during|around|just before) sunset/ 6:30pm}"
    str="${str/ dawn/ 5:30am}"
    str="${str/ dusk/ 7:30pm}"
    str="${str/ before dawn/ 4:30am}"
    #Remove the leftover ballast (stop) words and symbols:
    #str="${str// time | is | set | for | from | to | in | on | at | of | the | and | an | a |st |nd |rd |th | o'clock / }"
    for stw in " is " " set " " for " " from " " to " " in " " on " " at " " of " " the " " and " " an " " a " "st " "nd " "rd " "th " " o'clock " ; do ; str="${str//$stw/ }" ; done
    str="${str//[[:punct:]]~[-:+]}"
    #fix what we may have broken:-)
    str="${str/ augu / august }"
    str="${str/ mon / month }"
    str="${str/pm[ ]#pm/pm}" #said tonight at 10pm instead of tonight at 10.
    str="${str/am[ ]#am/am}"
    [[ $eglob ]] && unsetopt extendedglob
shift
fi
echo $(date -d "${str}" "$@")
